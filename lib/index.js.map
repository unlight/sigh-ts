{"version":3,"sources":["..\\src\\index.js"],"names":[],"mappings":";;;;;;kBAyCe,UAAS,EAAT,EAA2B;AAAA,KAAd,OAAc,yDAAJ,EAAI;;AACzC,KAAI,CAAC,IAAL,EAAW;AACV,MAAI,gBAAgB,iBAAO,IAAP,EAApB;AACA,MAAI,eAAe,gBAAgB,gBAAnC;AACA,MAAI,oBAAW,YAAX,CAAJ,EAA8B;AAC7B,OAAI,WAAW,QAAQ,YAAR,CAAf;AACA,OAAI,kBAAkB,iBAAI,QAAJ,EAAc,iBAAd,EAAiC,EAAjC,CAAtB;AACA,aAAU,oBAAO,EAAP,EAAW,eAAX,EAA4B,OAA5B,CAAV;AACA;AACD,SAAO,GAAG,QAAH,CAAY,OAAZ,CAAoB,IAApB,EAA0B,OAA1B,EAAmC,EAAC,cAAD,EAAnC,CAAP;AACA;;AAED,QAAO,uBAAU,GAAG,MAAb,EAAqB,iBAAS;AACpC;AACA,MAAI,EAAE,MAAM,IAAN,KAAe,KAAf,IAAwB,MAAM,IAAN,KAAe,QAAzC,CAAJ,EAAwD,OAAO,KAAP;AACxD,MAAI,EAAE,MAAM,QAAN,KAAmB,IAAnB,IAA2B,MAAM,QAAN,KAAmB,KAAhD,CAAJ,EAA4D,OAAO,KAAP;;AAE5D,SAAO,KAAK,kBAAK,KAAL,EAAY,MAAZ,EAAoB,MAApB,EAA4B,MAA5B,EAAoC,aAApC,CAAL,EAAyD,IAAzD,CAA8D,kBAAU;AAC9E,SAAM,IAAN,GAAa,OAAO,IAApB;AACA,SAAM,SAAN,GAAkB,KAAK,KAAL,CAAW,OAAO,SAAlB,CAAlB;AACA,SAAM,gBAAN,CAAuB,IAAvB;AACA,UAAO,KAAP;AACA,GALM,CAAP;AAMA,EAXM,CAAP;AAYA,C;;AAjED;;AACA;;AACA;;AACA;;;;;;AAEA,SAAS,IAAT,CAAc,OAAd,EAAuB;AACtB;AACA;AACA;AACA;AACA;AACA,KAAI,aAAa,QAAQ,YAAR,CAAjB;AACA,KAAI,IAAI,QAAQ,QAAR,CAAR;;AAEA,SAAQ,SAAR,GAAoB,IAApB;;AAEA,KAAI,QAAQ,MAAZ,EAAoB;AACnB,MAAI,eAAe,QAAQ,MAAR,CAAe,WAAf,EAAnB;AACA,UAAQ,MAAR,GAAiB,EAAE,WAAW,YAAb,EAA2B,IAA3B,CAAgC,UAAC,KAAD,EAAQ,GAAR;AAAA,UAAgB,OAAO,GAAP,EAAY,WAAZ,OAA8B,YAA9C;AAAA,GAAhC,CAAjB;AACA;;AAED,KAAI,QAAQ,MAAZ,EAAoB;AACnB,MAAI,aAAa,QAAQ,MAAR,CAAe,WAAf,EAAjB;AACA,UAAQ,MAAR,GAAiB,EAAE,WAAW,UAAb,EAAyB,IAAzB,CAA8B,UAAC,KAAD,EAAQ,GAAR;AAAA,UAAgB,OAAO,GAAP,EAAY,WAAZ,OAA8B,UAA9C;AAAA,GAA9B,CAAjB;AACA;;AAED;AACA,QAAO,iBAAS;AACf,MAAI,SAAS,WAAW,eAAX,CAA2B,MAAM,IAAjC,EAAuC;AACnD,oBAAiB,OADkC;AAEnD,aAAU,MAAM;AAFmC,GAAvC,CAAb;AAIA,SAAO;AACN,SAAM,OAAO,UADP;AAEN,cAAW,OAAO;AAFZ,GAAP;AAIA,EATD;AAUA;;AAED,IAAI,IAAJ;;AA4BA,OAAO,OAAP,GAAiB,QAAQ,SAAR,CAAjB","file":"src\\index.js","sourceRoot":"src","sourcesContent":["import {pick, assign, get} from \"lodash\";\nimport {mapEvents} from \"sigh-core/lib/stream\";\nimport {existsSync, readFileSync} from \"fs\";\nimport pkgDir from \"pkg-dir\";\n\nfunction task(options) {\n\t// This function is called once for each subprocess in order to cache state,\n\t// it is not a closure and does not have access to the surrounding state, use\n\t// `require` to include any modules you need, for further info see\n\t// https://github.com/ohjames/process-pool\n\t// var log = require(\"sigh-core\").log;\n\tvar typescript = require(\"typescript\");\n\tvar _ = require(\"lodash\");\n\n\toptions.sourceMap = true;\n\n\tif (options.target) {\n\t\tvar scriptTarget = options.target.toUpperCase();\n\t\toptions.target = _(typescript.ScriptTarget).find((value, key) => String(key).toUpperCase() === scriptTarget);\n\t}\n\n\tif (options.module) {\n\t\tvar moduleKind = options.module.toUpperCase();\n\t\toptions.module = _(typescript.ModuleKind).find((value, key) => String(key).toUpperCase() === moduleKind);\n\t}\n\n\t// This task runs inside the subprocess to transform each event\n\treturn event => {\n\t\tvar result = typescript.transpileModule(event.data, {\n\t\t\tcompilerOptions: options,\n\t\t\tfileName: event.path\n\t\t});\n\t\treturn {\n\t\t\tdata: result.outputText,\n\t\t\tsourceMap: result.sourceMapText\n\t\t};\n\t};\n}\n\nvar proc;\n\nexport default function(op, options = {}) {\n\tif (!proc) {\n\t\tvar rootDirectory = pkgDir.sync();\n\t\tvar tsconfigFile = rootDirectory + \"/tsconfig.json\";\n\t\tif (existsSync(tsconfigFile)) {\n\t\t\tvar tsconfig = require(tsconfigFile);\n\t\t\tvar compilerOptions = get(tsconfig, 'compilerOptions', {});\n\t\t\toptions = assign({}, compilerOptions, options);\n\t\t}\n\t\tproc = op.procPool.prepare(task, options, {module});\n\t}\n\t\n\treturn mapEvents(op.stream, event => {\n\t\t// Data sent to/received from the subprocess has to be serialised/deserialised\n\t\tif (!(event.type === \"add\" || event.type === \"change\")) return event;\n\t\tif (!(event.fileType === \"ts\" || event.fileType === \"tsx\")) return event;\n\n\t\treturn proc(pick(event, \"type\", \"data\", \"path\", \"projectPath\")).then(result => {\n\t\t\tevent.data = result.data;\n\t\t\tevent.sourceMap = JSON.parse(result.sourceMap);\n\t\t\tevent.changeFileSuffix(\"js\");\n\t\t\treturn event;\n\t\t});\n\t});\n}\n\nmodule.exports = exports[\"default\"];"]}