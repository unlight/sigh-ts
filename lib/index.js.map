{"version":3,"sources":["..\\src\\index.js"],"names":[],"mappings":"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","file":"src/index.js","sourceRoot":"src","sourcesContent":["import {mapEvents} from \"sigh-core/lib/stream\";\nimport {log, Bacon, Event} from \"sigh-core\";\nimport {existsSync, readFileSync} from \"fs\";\nimport pkgDir from \"pkg-dir\";\nimport ts from \"typescript\";\nimport _ from \"lodash\";\n\nexport default function (op, compilerOptions = {}) {\n    compilerOptions = getCompilerOptions(compilerOptions);\n    var files = {};\n    // Create the language service host to allow the LS to communicate with the host\n    const servicesHost = {\n        getScriptFileNames: () => _.keys(files),\n        getScriptVersion: (filepath) => files[filepath] && files[filepath].version.toString(),\n        getScriptSnapshot: (filepath) => {\n            var data = \"\";\n            if (files[filepath]) {\n                data = files[filepath].data;\n            } else {\n                if (!existsSync(filepath)) return undefined;\n                data = readFileSync(filepath).toString();\n            }\n            return ts.ScriptSnapshot.fromString(data);\n        },\n        getCurrentDirectory: _.constant(process.cwd()),\n        getCompilationSettings: _.constant(compilerOptions),\n        getDefaultLibFileName: (options) => ts.getDefaultLibFilePath(options)\n    };\n    // Create the language service files\n    const services = ts.createLanguageService(servicesHost, ts.createDocumentRegistry());\n\n    logDiagnostics(services.getCompilerOptionsDiagnostics());\n\n    function eventCallback(event, index, events) {\n        switch (event.type) {\n            case \"add\":\n                files[event.path] = {};\n                files[event.path].version = 0;\n                files[event.path].data = event.data;\n                break;\n            case \"change\":\n                files[event.path].version++;\n                files[event.path].data = event.data;\n                break;\n            case \"remove\":\n                delete files[event.path];\n                break;\n        }\n        if (event.type === \"add\" || event.type === \"change\") {\n            var {outputFiles, emitSkipped} = services.getEmitOutput(event.path);\n            for (var i = 0; i < outputFiles.length; i++) {\n                var outfile = outputFiles[i];\n                if (_.endsWith(outfile.name, \".js\")) {\n                    event.data = outfile.text;\n                } else if (_.endsWith(outfile.name, \".js.map\")) {\n                    event.applySourceMap(JSON.parse(outfile.text));\n                } else if (_.endsWith(outfile.name, \".d.ts\")) {\n                    var fields = _.pick(event, [\"type\", \"basePath\", \"data\", \"path\"]);\n                    fields.data = outfile.text;\n                    var newEvent = new Event(fields);\n                    newEvent.changeFileSuffix(\"d.ts\");\n                    events.push(newEvent);\n                }\n            }\n            // Log diagnostics.\n            var diagnostics = []\n                .concat(services.getSyntacticDiagnostics(event.path))\n                .concat(services.getSemanticDiagnostics(event.path));\n\n            logDiagnostics(diagnostics);\n\n            if (emitSkipped) {\n                log.warn(`Emit of ${event.path} failed (fatal errors).`);\n            }\n        }\n        return event;\n    }\n\n    return op.stream.map(events => {\n        _.each(events, eventCallback);\n        return events;\n    });\n}\n\nfunction logDiagnostics(diagnostics) {\n    _.forEach(diagnostics, d => {\n        var message = ts.flattenDiagnosticMessageText(d.messageText, \"\\n\");\n        if (d.file) {\n            var { line, character } = d.file.getLineAndCharacterOfPosition(d.start);\n            let lineText = `${d.file.fileName}:${line + 1}:${character + 1}`;\n            message = `${lineText} ${message}`;\n        }\n        message = message.trim();\n        if (d.category === 0 || d.category === 1) {\n            log.warn(message.trim());\n        } else {\n            log(message);\n        }\n    });\n}\n\nfunction getCompilerOptions(options = {}) {\n    var tsconfigFile = pkgDir.sync() + \"/tsconfig.json\";\n    if (existsSync(tsconfigFile)) {\n        var tsconfig = require(tsconfigFile);\n        _.assign(options, _.get(tsconfig, \"compilerOptions\", {}));\n    }\n    if (options.target) {\n        options.target = getEnumOption(ts.ScriptTarget, options.target);\n    }\n    if (options.module) {\n        options.module = getEnumOption(ts.ModuleKind, options.module);\n    }\n    if (options.inlineSourceMap || options.sourceMap) {\n        options.inlineSources = true;\n    }\n    return options;\n}\n\nfunction getEnumOption(collection, value) {\n    var valueUpper = String(value).toLocaleUpperCase();\n    var result = _.chain(collection)\n        .findKey(value => String(value).toUpperCase() === valueUpper)\n        .toNumber()\n        .value();\n    if (_.isNaN(result)) {\n        result = value;\n    }\n    return result;\n}\n\nmodule.exports = exports[\"default\"];"]}